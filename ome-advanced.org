#+TITLE: Oh My Emacs Advanced
#+OPTIONS: toc:2 num:nil ^:nil

This is part of the [[https://github.com/xiaohanyu/oh-my-emacs][oh-my-emacs]].

This file contains some advanced features or packages which could make emacs
look unlike emacs. So ensure you have some basic knowledge and experience
before loading this file.

* Prerequisites
  :PROPERTIES:
  :CUSTOM_ID: advanced-prerequisites
  :END:

#+NAME: advanced-prerequisites
#+CAPTION: Prerequisites for ome-advanced module
|          | Windows | Ubuntu/Debian/Mint        | ArchLinux                    | Fedora      | Mac OS X | Mandatory? |
|----------+---------+---------------------------+------------------------------+-------------+----------+------------|
| [[http://www.tug.org/texlive/][texlive]]  |         | texlive-full latex-beamer | texlive-most texlive-langcjk | texlive-all |          | Yes        |
| [[http://beyondgrep.com/][ack-grep]] | ack     | ack-grep                  | ack                          | ack         | ack      | No         |

Notes:
- [[http://www.tug.org/texlive/][texlive]] is required by evil, since evil need =texi2pdf= to =make
  info=. However, I don't think it is a good idea to install the huge texlive
  just to build evil, so I've made a [[http://gitorious.org/evil/evil/merge_requests/50][patch]] for it.

* El-get packages
  :PROPERTIES:
  :CUSTOM_ID: advanced-el-get-packages
  :END:

#+NAME: advanced-el-get-packages
#+CAPTION: El-get packages matrix for ome-advanced module
|                | Status      | Description                              |
|----------------+-------------+------------------------------------------|
| [[http://gitorious.org/evil][evil]]           | Required    | Finally, the Emacs OS get a good editor. |
| [[https://github.com/cofi/evil-leader][evil-leader]]    | Required    | <leader> key for evil                    |
| [[git://gitorious.org/vimpulse/vimpulse.git][vimpulse]]       | Deprecated  | Use evil instead.                        |
| [[http://www.gnu.org/software/emacs/manual/html_node/viper/][viper]]          | Deprecated  | Use evil instead.                        |
| [[https://github.com/jhelwig/ack-and-a-half][ack-and-a-half]] | Recommended | Yet another emacs front-end to ack       |

* Evil
  :PROPERTIES:
  :CUSTOM_ID: evil
  :END:

#+BEGIN_QUOTE
As a poke at Emacs' creeping featurism, vi advocates have been known to
describe Emacs as "a great operating system, lacking only a decent editor".

-- [[http://en.wikipedia.org/wiki/Editor_war][Editor war]]
#+END_QUOTE

I must say that emacs is a great platform, but lacks a quick and effective
editor like vi, fortunately, there comes [[http://gitorious.org/evil][evil]].

"Evil is an extensible vi layer for Emacs. It emulates the main features of
Vim, and provides facilities for writing custom extensions." IMHO, evil is a
great successor to [[http://www.emacswiki.org/emacs/Vimpulse][Vimpulse]], [[http://www.emacswiki.org/emacs/VimMode][vim-mode]] and [[http://www.emacswiki.org/emacs/ViperMode][ViperMode]].

By default, oh-my-emacs =turn-on-evil-mode= on =text-mode= and =prog-mode=,
since emacs has only three [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Major-Modes.html][basic major modes]], you'll get evil enabled in almost
all modes which focus on editing, by editing I mean, modes such as =c-mode=,
=js-mode= would =turn-on-evil-mode=, however, modes such as =dired=, =info=
would not =turn-on-evil-mode= by default. And since =Info-mode= didn't has a
parent mode, so we need to =turn-off-evil-mode= manually.

If you need to turn off evil temporarily for a single buffer, use
=M-x evil-local-mode= instead of =M-x evil-mode=, since the latter will turn
off evil-mode globally, which means, evil-mode will be turned off for the whole
Emacs session.

#+NAME: evil
#+BEGIN_SRC emacs-lisp
  (add-to-list 'el-get-sources
               '(:name evil
                       :after (progn
                                (setq evil-auto-indent t)
                                (setq evil-regexp-search t)
                                (setq evil-want-C-i-jump t)
                                (add-hook 'text-mode-hook 'turn-on-evil-mode)
                                (add-hook 'prog-mode-hook 'turn-on-evil-mode)
                                (add-hook 'comint-mode-hook 'turn-on-evil-mode)
                                (add-hook 'Info-mode-hook 'turn-off-evil-mode))))
#+END_SRC

* Evil-leader
  :PROPERTIES:
  :CUSTOM_ID: evil-leader
  :END:

The keyboard is a real and heavily occupied estate in both Emacs and
Vim. Specially, just about every key is already bound to a command in normal
state Vim. Fortunately, Vim provides an easy way to define additional mappings
on these keys. It's called a [[http://usevim.com/2012/07/20/vim101-leader/][mapleader]].

Evil leader just provides the =<leader>= feature from Vim to evil, which
provides an easy way to bind keys under a variable prefix key. The default
binding of =<leader>= is =\=, which is not easy to reach, so oh-my-emacs bind
it to =<SPC>=, you don't use =<SPC>= to move right, ha?  Some other people
prefer to bind the =<leader>= key to comma =,=, but =,= already has a
binding(=evil-repeat-find-char-revers= in evil normal state).

BTW, oh-my-emacs will use =helm= in evil-leader if available. So now you can do
=helm-find-files= simply by =<SPC> e=, for example. Enjoy it.

#+NAME: evil-leader
#+BEGIN_SRC emacs-lisp
  (defun ome-evil-leader-setup ()
    (evil-leader/set-leader "<SPC>")
    (if (featurep 'helm)
        (evil-leader/set-key
          "e" 'helm-find-files
          "b" 'helm-buffers-list)
      (evil-leader/set-key
        "e" 'find-file
        "b" 'switch-to-buffer))
    (evil-leader/set-key
      "k" 'kill-buffer)
    (global-evil-leader-mode))

  (when (featurep 'evil)
    (add-to-list 'el-get-sources
                 '(:name evil-leader
                         :after (ome-evil-leader-setup))))
#+END_SRC

* Ack-and-a-half
  :PROPERTIES:
  :CUSTOM_ID: ack-and-a-ha
  :END:

As we all know, Emacs is a good text editor. However, in some cases, we may
spend most of our time to text reading instead of editing. As an advanced Emacs
user, you may know [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Grep-Searching.html][grep-find]], and you may also know that you can jump to the
next matching item by =M-g n=, oh, that's cool, really. But you still need to
specify what type of file to search. You don't want to touch binary files with
Emacs, ha? And, certainly you do want to ignore some hidden files such as files
and directories used by various version control system. So there comes [[http://beyondgrep.com/][ack]],
which works as expected.

With the help of [[https://github.com/jhelwig/ack-and-a-half][ack-and-a-half]], just go to the right place, then =M-x ack=,
you'll get all you need. Enjoy it.

#+NAME: ack-and-a-half
#+BEGIN_SRC emacs-lisp
  (when (or (executable-find "ack") (executable-find "ack-grep"))
    (add-to-list 'el-get-sources
                 '(:name ack-and-a-half)))
#+END_SRC

* Todo
*** Evil mode
- I only enable =evil-local-mode= for =text-mode= and =prog-mode=, but I don't
  know why =evil-local-mode= is enabled for =magit-log-mode= by default and
  shadowed a lot of =magit= keybindings?
- Evil has some conflicts with smartparens due to cursor position. I should
  temporarily disable =evil-local-mode= when I do operations like
  =sp-up-sexp=. Maybe I can get this by =post-command-hook= or smartparens's
  =post-command-handler=? Or just use =defadvice=?
- More investigation [[https://github.com/timcharper/evil-surround][evil-surround]] and [[https://github.com/cofi/evil-leader][evil-leader]]. Thanks [[http://www.reddit.com/user/MoreHugs][MoreHugs]].
