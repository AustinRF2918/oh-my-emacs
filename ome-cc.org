#+TITLE: Oh My Emacs CC
#+OPTIONS: toc:2 num:nil ^:nil

This is part of the [[https://github.com/xiaohanyu/oh-my-emacs][oh-my-emacs]].

This file contains some settings for =cc-mode=.

* Basic CC-Mode Settings
  :PROPERTIES:
  :CUSTOM_ID: basic-cc
  :END:

=cc-mode= is not a single mode, actually, =cc-mode= is a collection of emacs
major mode for "editing files containing C, C++, Objective-C, Java, CORBA IDL
(and the variants CORBA PSDL and CIDL), Pike and AWK code."

Although =cc-mode= is a bit old, it is still powerful and flexible. It
contains a powerful [[http://www.gnu.org/software/emacs/manual/html_mono/ccmode.html#Indentation-Engine-Basics][indentation engine]], supports various builtin coding
[[http://www.gnu.org/software/emacs/manual/html_mono/ccmode.html#Styles][styles]], and provides various useful [[http://www.gnu.org/software/emacs/manual/html_mono/ccmode.html#Minor-Modes][minor modes]].

You do need some basic elisp knowledge to master the power of =cc-mode=. For
example, you need to know what the difference between =setq= and
=setq-default=, some basic knowledge about elisp hooks, etc.

#+NAME: basic
#+BEGIN_SRC emacs-lisp
  (setq c-default-style '((java-mode . "java")
                          (awk-mode . "awk")
                          (c-mode . "k&r")
                          (c++-mode . "stroustrup")
                          (other . "linux")))

  (setq-default c-basic-offset 4)

  (defun ome-c-initialization-hook ()
    (define-key c-mode-base-map (kbd "RET") 'c-context-line-break))

  (add-hook 'c-initialization-hook 'ome-c-initialization-hook)

  (defun ome-c-mode-common-hook ()
    (add-to-list 'c-cleanup-list 'defun-close-semi)
    (c-toggle-hungry-state)
    (c-toggle-auto-newline)
    (subword-mode 1))

  ;; this will affect all modes derived from cc-mode, like
  ;; java-mode, php-mode, etc
  (add-hook 'c-mode-common-hook 'ome-c-mode-common-hook)
#+END_SRC

* Makefile Settings
  :PROPERTIES:
  :CUSTOM_ID: makefile
  :END:

The only thing you need to do in =makefile-mode= is to enable tab indentation
instead of space indentation, since =makefile-mode= relys on tabs being tabs
instead of a mixture of spaces and tabs, which I think, is a bug, but used as
a feature of makefile. Ah, weird details and historial dirty quirks of
makefile.

#+NAME: makefile
#+BEGIN_SRC emacs-lisp
  (add-hook 'makefile-mode-hook
            (lambda ()
              (setq indent-tabs-mode t)))
#+END_SRC

* CMake
  :PROPERTIES:
  :CUSTOM_ID: cmake
  :END:

[[http://www.cmake.org/][CMake]] is my favourate build tool for C/C++ software. To be precise, CMake is
not a build tool, since it does not build the project, instead, it generates
the files needed by your build tool(GNU make, Visual Studio, etc). The only
thing that I dislike about CMake is its syntax, which is weird and hard to
type. Anyway, it is much better than conventional [[http://en.wikipedia.org/wiki/GNU_build_system][Autotools]], IMHO, Autotools is
quite complicated, brings more problems than it solves. Do not use it unless
you have to.

#+NAME: cmake
#+BEGIN_SRC emacs-lisp
  (add-to-list 'el-get-sources
               '(:name cmake-mode))
#+END_SRC

* Documentation with Doxymacs
  :PROPERTIES:
  :CUSTOM_ID: doxymacs
  :END:

#+BEGIN_QUOTE
Doxygen is the de facto standard tool for generating documentation from
annotated C++ sources, but it also supports other popular programming languages
such as C, Objective-C, C#, PHP, Java, Python, IDL (Corba, Microsoft, and
UNO/OpenOffice flavors), Fortran, VHDL, Tcl, and to some extent D.

-- http://www.doxygen.org/
#+END_QUOTE

[[http://doxymacs.sourceforge.net/][Doxymacs]] brings the power of doxygen to Emacs, you can easily insert Doxygen
style comments in emacs. The default keybindings are:
- =C-c d ?= look up documentation for the symbol under the point.
- =C-c d r= rescan your Doxygen tags file.
- =C-c d f= insert a Doxygen comment for the next function.
- =C-c d i= insert a Doxygen comment for the current file.
- =C-c d ;= insert a Doxygen comment for a member variable on the current line
  (like M-;).
- =C-c d m= insert a blank multi-line Doxygen comment.
- =C-c d s= insert a blank single-line Doxygen comment.
- =C-c d @= insert grouping comments around the current region.

If you like, you can even integrate Doxygen to CMake workflow, see [[http://majewsky.wordpress.com/2010/08/14/tip-of-the-day-cmake-and-doxygen/][here]].

#+NAME: doxymacs
#+BEGIN_SRC emacs-lisp
  (add-to-list 'el-get-sources
               '(:name doxymacs
                       :after (progn
                                (add-hook 'c-mode-common-hook 'doxymacs-mode)
                                (add-hook 'c-mode-common-hook 'doxymacs-font-lock))))
#+END_SRC

* Indexing with Cscope
  :PROPERTIES:
  :CUSTOM_ID: cscope
  :END:

There're multiple tools for source browsing in Emacs, such as the builtin
[[http://www.gnu.org/software/emacs/manual/html_node/emacs/Tags.html][etags]], and [[http://ctags.sourceforge.net/][ctags]], etc. While etags/ctags supports multiple programming
languages, [[http://cscope.sourceforge.net/][cscope]] was designed for C code, however, you can do some [[http://cscope.sourceforge.net/cscope_vim_tutorial.html][hack]] to
make it work with C++/Java.

The limitation of tag-like source code indexing and browsing tools is, all
these tools lacks deep understanding of the programming language, all they know
is just symbols/tokens, they know little about semantics, so you may find
unwanted or wrong results with tag tools. Cscope understands some semantics of
C programming languages, such as symbol/function definitions, and it will lead
you to the right place in C programming language. No more promise for other
lanauges since cscope have no knowledge of OOP.

Cscope has a bundled =xcscope.el=, which provide an Emacs interface to
cscope. The default keybindings use the =C-c s= prefix:
- Finding:
  - =C-c s s= Find symbol.
  - =C-c s d= Find global definition.
  - =C-c s g= Find global definition (alternate binding).
  - =C-c s G= Find global definition without prompting.
  - =C-c s c= Find functions calling a function.
  - =C-c s C= Find called functions (list functions called from a function).
  - =C-c s t= Find text string.
  - =C-c s e= Find egrep pattern.
  - =C-c s f= Find a file.
  - =C-c s i= Find files #including a file.
- Navigation through the search results:
  - =C-c s b= Display *cscope* buffer.
  - =C-c s B= Auto display *cscope* buffer toggle.
  - =C-c s n= Next symbol.
  - =C-c s N= Next file.
  - =C-c s p= Previous symbol.
  - =C-c s P= Previous file.
  - =C-c s u= Pop mark.
- Setting and unsetting the variable, =cscope-initial-directory=, (location
  searched for the cscope database directory):
  - =C-c s a= Set initial directory.
  - =C-c s A= Unset initial directory.
- Database maintenance:
  - =C-c s L= Create list of files to index.
  - =C-c s I= Create list and index.
  - =C-c s E= Edit list of files to index.
  - =C-c s W= Locate this buffer's cscope directory ("W" --> "where").
  - =C-c s S= Locate this buffer's cscope directory. (alternate binding: "S"
    --> "show").
  - =C-c s T= Locate this buffer's cscope directory. (alternate binding: "T"
    --> "tell").
  - =C-c s D= Dired this buffer's directory.

#+NAME: cscope
#+BEGIN_SRC emacs-lisp
  (if (executable-find "cscope")
      (add-to-list 'el-get-sources
                   '(:name xcscope)))

#+END_SRC
* Todo
- Port cc-mode's =hungry-delete= to other-mode comment block?
- Documentation for some useful cc-mode keybindings such as
  - =C-c C-c=
  - =M-;=
- Integrate [[http://www.wonderworks.com/download/filladapt.el][filladapt]] package to enhance emacs's adaptive filling.
- Add special font-lock support for some Qt's "keywords" such as "signal" and
  "slot".
