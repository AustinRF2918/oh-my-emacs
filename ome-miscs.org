#+TITLE: Oh My Emacs Miscs
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[https://github.com/xiaohanyu/oh-my-emacs][oh-my-emacs]].

* Oh-my-emacs Miscs

Things that still don't find a good place to put, :-).

** Enable some dangerous commands

Emacs may be slow when you editing large files with many minor modes
on. [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Narrowing.html][Narrowing]] allows you focus in on some portion of the buffer, making the
rest temporarily inaccessible. Widening is the reverse of narrowing, which
cancels the narrowing, and makes the entire buffer once again accessible.

By default, the narrowing commands are considered to be dangerous, we just
remove the dangerous tag here.

#+BEGIN_SRC emacs-lisp
  (put 'narrow-to-page 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
#+END_SRC
** Toggle server mode .
   :PROPERTIES:
   :CUSTOM_ID: emacs-server
   :END:

You can [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html][use emacs as a server]], which "listens" for external edit requests and
acts accordingly. Thus you can =alias vim=emacsclient= as the lucky
stuff, :-).

There're two ways to turn on =server-mode= on emacs start:
- =(server-mode t)=
- =(server-start)=

In either way you can use =emacsclient= to connect an existing emacs server,
and finish editing by typing =C-x #(server-edit)=, which will "kill" the
=emacscient=. You can also quit =emacsclient= by =C-x C-c=, but this will kill
emacs if you use =(server-start)= while keeps emacs alive if you use
=(server-mode t)=, I don't know why. If you know the details, please tell me.

#+NAME: emacs-server
#+BEGIN_SRC emacs-lisp
(server-mode t)
#+END_SRC

** Random Number
   :PROPERTIES:
   :CUSTOM_ID: random-number
   :END:

#+NAME: random-number
#+BEGIN_SRC emacs-lisp
  ;; Seed the random-number generator
  (random t)
#+END_SRC

** Rainbow Delimiters
   :PROPERTIES:
   :CUSTOM_ID: rainbow-delimiters
   :END:

"RainbowDelimiters is a "rainbow parentheses"-like mode which highlights
parentheses, brackets, and braces according to their depth. Each successive
level is highlighted in a different color. This makes it easy to spot matching
delimiters, orient yourself in the code, and tell which statements are at a
given depth."

#+NAME: rainbow-delimiters
#+BEGIN_SRC emacs-lisp
  (add-to-list 'el-get-sources
               '(:name rainbow-delimiters
                       :after (progn
                                (global-rainbow-delimiters-mode))))
#+END_SRC

** Transparently Open Compressed Files
   :PROPERTIES:
   :CUSTOM_ID: auto-compression-mode
   :END:

"Auto Compression mode is a global minor mode.  When enabled, compressed files
are automatically uncompressed for reading, and compressed when writing."

#+NAME: auto-compression-mode
#+BEGIN_SRC emacs-lisp
  (auto-compression-mode t)
#+END_SRC

** Allowing Opening Images
   :PROPERTIES:
   :CUSTOM_ID: auto-image-file-mode
   :END:

"Toggle visiting of image files as images (Auto Image File mode)."

#+NAME: auto-image-file-mode
#+BEGIN_SRC emacs-lisp
  (auto-image-file-mode t)
#+END_SRC
** Magit
   :PROPERTIES:
   :CUSTOM_ID: magit
   :END:

[[http://www.git-scm.com/][Git]] might be the most popular version control system in the world by far, every
programmer should try it, learn it, and finally master it. In fact, mastering
git will boost your workflow and efficiency to a new level. Besides version
control, git can also do other useful things such as file and storage
sync. [[http://en.wikipedia.org/wiki/Linus_Torvalds][Linus Torvalds]], father of git, describes git as [[http://linux.die.net/man/1/git][a stupid content tracker]]:

#+BEGIN_QUOTE
In many ways you can just see git as a filesystem - it's content-
addressable, and it has a notion of versioning, but I really really
designed it coming at the problem from the viewpoint of a _filesystem_
person (hey, kernels is what I do), and I actually have absolutely _zero_
interest in creating a traditional SCM system.

-- Linus Torvalds, http://marc.info/?l=linux-kernel&m=111314792424707
#+END_QUOTE

Actually, "git is fundamentally a content-addressable filesystem with a
VCS user interface written on top of it[1]".

[[http://magit.github.io/magit/][Magit]] integrate emacs with git, which will make your workflow smoother and more
enjoyable. Of course there're other choices, but I prefer magit, view [[http://alexott.net/en/writings/emacs-vcs/EmacsGit.html][Alexott's
Blog]] for technical details.

#+NAME: magit
#+BEGIN_SRC emacs-lisp
  (if (executable-find "git")
      (progn
        (add-to-list 'el-get-sources
                     '(:name magit))))
#+END_SRC

** Visual-line-mode
   :PROPERTIES:
   :CUSTOM_ID: visual-line-mode
   :END:

[[http://www.gnu.org/software/emacs/manual/html_node/emacs/Visual-Line-Mode.html][Visual line mode]] is a new mode in Emacs 23. It provides support for editing by
visual lines. It turns on word-wrapping in the current buffer, and rebinds C-a,
C-e, and C-k to commands that operate by visual lines instead of logical lines.

[[file:ome-basic.org::*Auto-fill%20Mode][As you know]], we have =turn-on-auto-fill= for =text-mode= and =prog-mode= and
all derived modes, which may make it useless to turn on =visual-line-mode= most
of the time. But we still turn on it globally to make it a fallback when
=auto-fill-mode= was disabled by users.

#+NAME: visual-line-mode
#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode t)
#+END_SRC

* Footnotes
[1] See [[http://git-scm.com/book/en/Git-Internals][Git Internals]] to technical details.
